%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% DESCRIPTION: Estimates min_(u0, u1, u2) CVaR_ls(j)[ beta*exp(m*g(x0)) + ... + beta*exp(m*g(x3)) | x0 = xs{i}, (u0, u1, u2) ] 
%              via Monte Carlo, given state x and confidence level alpha
%              for cancer treatment example, N = 3
% NOTE: Compare output to Js{1}(j,i) from Main_DynProgram.m
% Author: Margaret Chapman
% Date: October 24, 2018
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

close all; clearvars; clc;

setup_example; if N ~= 3, error('N must be 3!'); end;

cardU = nu^N;                           % cardU = # possible control sequences

U = getAllControlSeq( us, nu, cardU );  % U{i} = ith possible control sequence of the form (u0, u1, u2)

i = 7438; x = xs{i};                    % fix initial state 
 
j = 1; alpha = ls(j);                   % fix initial confidence level

[ est_J0ji, est_uStar ] = estimateValueByMonteCarlo( x, alpha, U, cardU, ws, nd, tick_P, m, beta, N, ak, x1s, x2s );
% est_J0ji ~= min_(u0, u1, u2) CVaR_ls(j)[ beta*exp(m*g(x0)) + ... + beta*exp(m*g(x3)) | x0 = xs{i}, (u0, u1, u2) ] 
% est_uStar = a control sequence that achieves the estimated minimum

%% Compare values from Dynamic programming vs. Monte Carlo (nt = 100,000)
            % 'dyn_prog_Nis3_oct252018.mat'

close all; clearvars; clc; load('dyn_prog_Nis3_oct252018.mat');            
            
% i = 7438; j = 1; xs{i} = [267; 22]; ls(j) = 0.95;
% Js{1}(j,i) = 50.4884 (Dyn Program value)
% est_J0ji   = 50.2706 (Monte carlo value); est_uStar = [4 4 4]

% i = 11911; j = 1; xs{i} = [660; 35]; ls(j) = 0.95;
% Js{1}(j,i) = 7.8269e+03 (Dyn Program value)
% est_J0ji   = 8.6262e+03 (Monte Carlo value); est_uStar = [4 4 4] (trial 1)
% est_J0ji   = 8.5787e+03 (Monte Carlo value); est_uStar = [4 4 4] (trial 2)

% i = 2943; j = 9; xs{i} = [810; 8]; ls(j) = 0.15;
% Js{1}(j,i) = 46.0620 (Dyn Program value)
% est_J0ji   = 46.0620 (Monte Carlo value); est_uStar = [1 1 1] 
            
% i = 11380; j = 3; xs{i} = [69; 34]; ls(j) = 0.75;
% Js{1}(j,i) = 3.3285 (Dyn Program value)
% est_J0ji   = 3.3230 (Monte carlo value); est_uStar = [4 4 4]

% i = 12154; j = 7; xs{i} = [387; 36]; ls(j) = 0.3500;
% Js{1}(j,i) = 9.0372e+03 (Dyn Program value) 
% est_J0ji   = 9.0619e+03 (Monte Carlo value); est_uStar = [4 4 2]
                    
% i = 6100; j = 8; xs{i} = [261; 18]; ls(j) = 0.25;
% Js{1}(j,i) = 57.9283 (Dyn Program value)     
% est_J0ji   = 58.4227 (Monte Carlo value); est_uStar = [4 4 4]

% i = 9500; j = 10; xs{i} = [441; 28]; ls(j) = 0.05;
% Js{1}(j,i) = 2.3973e+03 (Dyn Program value)
% est_J0ji   = 2.3973e+03 (Monte Carlo value); est_uStar = [1 1 1]

% i = 1000; j = 7; xs{i} = [993; 2]; ls(j) = 0.35;
% Js{1}(j,i) = 17.3549 (Dyn Program value)
% est_J0ji   = 17.3549 (Monte Carlo value); est_uStar = [1 1 1] % since pop can't grow past 1000

% i = 11950; j = 9; xs{i} = [777; 35]; ls(j) = 0.15;
% Js{1}(j,i) = 1.0061e+04 (Dyn Program value)
% est_J0ji   = 1.0064e+04 (Monte Carlo value); est_uStar = [1 1 1] 

% i = 500; j = 10; xs{i} = [495; 1]; ls(j) = 0.05;
% Js{1}(j,i) = 10.8375 (Dyn Program value)
% est_J0ji   = 10.8375 (Monte Carlo value); est_uStar = [1 1 1] 


